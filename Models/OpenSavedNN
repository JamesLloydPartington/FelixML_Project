#echo 1 | sudo tee /proc/sys/vm/overcommit_memory
#export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64

import numpy as np

Path = "Quarter32Bit"

AllData = np.load(Path + "/ImageDataNorm.npy")
AllLabel = np.load(Path + "/ImageLab.npy")

No_Crystals = AllData.shape[0]
Total_ints = AllData.shape[0] * AllData.shape[1] * AllData.shape[2] * AllData.shape[3] 

Shuffle_Index = np.arange(No_Crystals)
np.random.shuffle(Shuffle_Index)

###########
TrainRatio = 0.8
ValidationRatio = 0.1 ## A fraction of the Traning data
TestRatio = 1 - TrainRatio - ValidationRatio

###########

TrainCrystalNo = round(TrainRatio * No_Crystals)
ValCrystalNo = round(ValidationRatio * No_Crystals)
TestCrystalNo = No_Crystals - TrainCrystalNo - ValCrystalNo
PixleNo = AllData.shape[2] * AllData.shape[3]

train_images = np.zeros(TrainCrystalNo * PixleNo * AllData.shape[1], dtype = np.float32).reshape(TrainCrystalNo, AllData.shape[1], AllData.shape[2], AllData.shape[3])
val_images = np.zeros(ValCrystalNo * PixleNo * AllData.shape[1], dtype = np.float32).reshape(ValCrystalNo, AllData.shape[1], AllData.shape[2], AllData.shape[3])
test_images = np.zeros(TestCrystalNo * PixleNo * AllData.shape[1], dtype = np.float32).reshape(TestCrystalNo, AllData.shape[1], AllData.shape[2], AllData.shape[3])

train_lab = np.zeros(TrainCrystalNo * AllData.shape[1], dtype = np.uint8).reshape(TrainCrystalNo, AllData.shape[1])
val_lab = np.zeros(ValCrystalNo * AllData.shape[1], dtype = np.uint8).reshape(ValCrystalNo, AllData.shape[1])
test_lab = np.zeros(TestCrystalNo * AllData.shape[1], dtype = np.uint8).reshape(TestCrystalNo, AllData.shape[1])

for i in range(0, No_Crystals): #Put Shuffled Crystals into training and validation and test
	if(i < TrainCrystalNo):
		train_images[i] = AllData[Shuffle_Index[i]]
		train_lab[i] = AllLabel[Shuffle_Index[i]]

	elif(i < TrainCrystalNo + ValCrystalNo):
		val_images[i - TrainCrystalNo] = AllData[Shuffle_Index[i]]
		val_lab[i - TrainCrystalNo] = AllLabel[Shuffle_Index[i]]	
	
	else:
		test_images[i - TrainCrystalNo - ValCrystalNo] = AllData[Shuffle_Index[i]]
		test_lab[i - TrainCrystalNo - ValCrystalNo] = AllLabel[Shuffle_Index[i]]
		

Shuffle_Index_Train = np.arange(TrainCrystalNo * AllData.shape[1])
Shuffle_Index_Val = np.arange(ValCrystalNo * AllData.shape[1])
Shuffle_Index_Test = np.arange(TestCrystalNo * AllData.shape[1])

np.random.shuffle(Shuffle_Index_Train)
np.random.shuffle(Shuffle_Index_Val)
np.random.shuffle(Shuffle_Index_Test)

train_images = train_images.reshape(-1, AllData.shape[2], AllData.shape[3], 1)
val_images = val_images.reshape(-1, AllData.shape[2], AllData.shape[3], 1)
test_images = test_images.reshape(-1, AllData.shape[2], AllData.shape[3], 1)
train_lab = train_lab.reshape(-1)
val_lab = val_lab.reshape(-1)
test_lab = test_lab.reshape(-1)

train_images_copy = train_images
val_images_copy = val_images
test_images_copy = test_images
train_lab_copy = train_lab
val_lab_copy = val_lab
test_lab_copy = test_lab


for i in range(0,TrainCrystalNo * AllData.shape[1]):
	train_images_copy[i] = train_images[Shuffle_Index_Train[i]]
	train_lab_copy[i] = train_lab[Shuffle_Index_Train[i]]
for i in range(0,ValCrystalNo * AllData.shape[1]):
	val_images_copy[i] = val_images[Shuffle_Index_Val[i]]
	val_lab_copy[i] = val_lab[Shuffle_Index_Val[i]]
for i in range(0,TestCrystalNo * AllData.shape[1]):
	test_images_copy[i] = test_images[Shuffle_Index_Test[i]]
	test_lab_copy[i] = test_lab[Shuffle_Index_Test[i]]

train_images = train_images_copy.astype("float32")
val_images = val_images_copy.astype("float32")
test_images = test_images_copy.astype("float32")
train_lab = train_lab_copy
val_lab = val_lab_copy
test_lab = test_lab_copy

from keras.utils import to_categorical
train_lab = to_categorical(train_lab)
val_lab = to_categorical(val_lab)
test_lab = to_categorical(test_lab)



####################################################################################


from keras import layers
from keras import models
from keras import optimizers
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image_dataset_from_directory
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.regularizers import l2
from keras.models import load_model
#from keras.models import load_model
import os
import matplotlib.pyplot as plt

os.environ["TF_CPP_MIN_LOG_LEVEL"]="3" 


model = load_model("BestModCov1.hdf5")
model.summary()

'''
EarlyStop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=20)
Checkpoint = ModelCheckpoint("BestModCov2.hdf5", monitor='val_loss', verbose=1, save_best_only=True, mode='min', period=1)
history = model.fit(train_images, train_lab, epochs=50, batch_size = 32, validation_data = (val_images, val_lab), shuffle = True, callbacks=[EarlyStop, Checkpoint])
model.save('BestModCov2Last.h5')
test_loss, test_acc = model.evaluate(test_images, test_lab)

acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(acc) + 1)
plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.show()
'''

Predicted = model.predict_classes(test_images)

sum = 0
Results = np.zeros(10)
TimesGuessed = np.zeros(10)
Histo = np.zeros(100).reshape(10,10)
for i in range(0, test_images.shape[0]):
	print(Predicted[i], test_lab_copy[i])
	sum = sum + (Predicted[i] - test_lab_copy[i]) ** 2

	if(Predicted[i] == test_lab_copy[i]):	
		Results[test_lab_copy[i]] += 1
	TimesGuessed[Predicted[i]] +=1
	Histo[test_lab_copy[i]][Predicted[i]] += 1
sum = (sum / test_images.shape[0]) ** 0.5
Results = Results * 10 / test_images.shape[0]
TimesGuessed = TimesGuessed * 10 / test_images.shape[0]
print("Average sum of square of differences:", sum)
print("Predicted class accuracy", Results)
print("How often each class is picked", TimesGuessed)




fig=plt.figure(figsize = (10, 10))
img = Histo
plt.imshow(img, cmap = "gray")
plt.legend()
plt.show()


plt.show()






