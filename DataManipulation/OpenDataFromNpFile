#echo 1 | sudo tee /proc/sys/vm/overcommit_memory
#export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64

#First 2 lines of code are used to allow more memory allocation and activate the GPU on the desktop. You may need to activate similar commands

import numpy as np

Path = "Quarter32Bit" #Path containing the .npy files to use

AllData = np.load(Path + "/ImageData.npy") #Load images
AllLabel = np.load(Path + "/ImageLab.npy") #Load labels

No_Crystals = AllData.shape[0]

Shuffle_Index = np.arange(No_Crystals) #To randomise data, create an array of all the crystal indices and then shuffle it.
np.random.shuffle(Shuffle_Index)

###########
TrainRatio = 0.8 #Fraction of data used to train data
ValidationRatio = 0.1 #Fraction of data to check validation accuracy and loss
TestRatio = 1 - TrainRatio - ValidationRatio #Fraction of data used to test the final model

###########

TrainCrystalNo = round(TrainRatio * No_Crystals) #Calculate the number of crystals in each set of data
ValCrystalNo = round(ValidationRatio * No_Crystals)
TestCrystalNo = No_Crystals - TrainCrystalNo - ValCrystalNo

PixleNo = AllData.shape[2] * AllData.shape[3] #Number of pixles per image

#Allocate arrays for images.
train_images = np.zeros(TrainCrystalNo * PixleNo * AllData.shape[1], dtype = np.float32).reshape(TrainCrystalNo, AllData.shape[1], AllData.shape[2], AllData.shape[3])
val_images = np.zeros(ValCrystalNo * PixleNo * AllData.shape[1], dtype = np.float32).reshape(ValCrystalNo, AllData.shape[1], AllData.shape[2], AllData.shape[3])
test_images = np.zeros(TestCrystalNo * PixleNo * AllData.shape[1], dtype = np.float32).reshape(TestCrystalNo, AllData.shape[1], AllData.shape[2], AllData.shape[3])

#Allocate arrays for labels
train_lab = np.zeros(TrainCrystalNo * AllData.shape[1], dtype = np.uint8).reshape(TrainCrystalNo, AllData.shape[1])
val_lab = np.zeros(ValCrystalNo * AllData.shape[1], dtype = np.uint8).reshape(ValCrystalNo, AllData.shape[1])
test_lab = np.zeros(TestCrystalNo * AllData.shape[1], dtype = np.uint8).reshape(TestCrystalNo, AllData.shape[1])

for i in range(0, No_Crystals): #Randomly asign different crystals with their 10 thickness classificaions into training, validation and testing data
	if(i < TrainCrystalNo):
		train_images[i] = AllData[Shuffle_Index[i]] #Shuffle_Index[i] moves a random crystal into train_images[i]
		train_lab[i] = AllLabel[Shuffle_Index[i]]

	elif(i < TrainCrystalNo + ValCrystalNo):
		val_images[i - TrainCrystalNo] = AllData[Shuffle_Index[i]]
		val_lab[i - TrainCrystalNo] = AllLabel[Shuffle_Index[i]]	
	
	else:
		test_images[i - TrainCrystalNo - ValCrystalNo] = AllData[Shuffle_Index[i]]
		test_lab[i - TrainCrystalNo - ValCrystalNo] = AllLabel[Shuffle_Index[i]]
		
#Now we must shuffle the images because the thicknesses are all in order for each of the 3 arrays
Shuffle_Index_Train = np.arange(TrainCrystalNo * AllData.shape[1]) 
Shuffle_Index_Val = np.arange(ValCrystalNo * AllData.shape[1])
Shuffle_Index_Test = np.arange(TestCrystalNo * AllData.shape[1])

np.random.shuffle(Shuffle_Index_Train)
np.random.shuffle(Shuffle_Index_Val)
np.random.shuffle(Shuffle_Index_Test)

#Change image arrays dimensions so we no longer have a dimension for thickness, the 1 at the end is an array containing the gray scale activation of the image (would be 3 if it was an RGB image)
train_images = train_images.reshape(-1, AllData.shape[2], AllData.shape[3], 1)
val_images = val_images.reshape(-1, AllData.shape[2], AllData.shape[3], 1)
test_images = test_images.reshape(-1, AllData.shape[2], AllData.shape[3], 1)

#Flatten the label arrays
train_lab = train_lab.reshape(-1)
val_lab = val_lab.reshape(-1)
test_lab = test_lab.reshape(-1)

make copys of the arrays so we can shuffle the indices
train_images_copy = train_images
val_images_copy = val_images
test_images_copy = test_images
train_lab_copy = train_lab
val_lab_copy = val_lab
test_lab_copy = test_lab

#Shuffle the data again
for i in range(0,TrainCrystalNo * AllData.shape[1]):
	train_images_copy[i] = train_images[Shuffle_Index_Train[i]]
	train_lab_copy[i] = train_lab[Shuffle_Index_Train[i]]
for i in range(0,ValCrystalNo * AllData.shape[1]):
	val_images_copy[i] = val_images[Shuffle_Index_Val[i]]
	val_lab_copy[i] = val_lab[Shuffle_Index_Val[i]]
for i in range(0,TestCrystalNo * AllData.shape[1]):
	test_images_copy[i] = test_images[Shuffle_Index_Test[i]]
	test_lab_copy[i] = test_lab[Shuffle_Index_Test[i]]

#Copy the data back into the original arrays
train_images = train_images_copy.astype("float32")
val_images = val_images_copy.astype("float32")
test_images = test_images_copy.astype("float32")
train_lab = train_lab_copy
val_lab = val_lab_copy
test_lab = test_lab_copy

#Turn labels into to_categorical
from keras.utils import to_categorical
train_lab = to_categorical(train_lab)
val_lab = to_categorical(val_lab)
test_lab = to_categorical(test_lab)



####################################################################################
